<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[博客转移公告]]></title>
      <url>http://techkeep.cn/2016/03/31/Transfer-blog-announcement/</url>
      <content type="html"><![CDATA[<p>想了想自己已经折腾了多个地方了，从最初的三蛋空间，再到后来的新浪云，再到阿里云，再到腾讯云，再到现在的GitHub Page。</p>
<p>纠结于要不要备案，使用的域名是不是cn等等。</p>
<p>最后，来到了GitHub。</p>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数学建模协会的分享]]></title>
      <url>http://techkeep.cn/2015/11/07/%E6%95%B0%E6%A8%A1%E5%8D%8F%E4%BC%9A%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<p><a href="http://techkeep.qiniudn.com/MMC.pdf" target="_blank" rel="external">全过程的讲义下载</a></p>
<p>相关资源：<br><a href="http://book.douban.com/subject/5959958/" target="_blank" rel="external">数学模型 第四版</a><br><a href="http://v.163.com/special/cuvocw/lixingshijiao.html" target="_blank" rel="external">数学模型-现实世界的理性视角</a><br><a href="http://210.43.188.3:8080/html/guider/szzy.htm" target="_blank" rel="external">长沙理工大学可用数字资源列表</a><br><a href="http://book.douban.com/subject/7046813/" target="_blank" rel="external">精通MATLAB R2011a</a><br><a href="http://book.douban.com/subject/6052205/" target="_blank" rel="external">MATLAB在数学建模中的应用</a><br><a href="http://www.ituring.com.cn/book/1278" target="_blank" rel="external">编程导论</a><br><a href="https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-6" target="_blank" rel="external">Introduction to Computer Science and Programming Using Python</a><br><a href="http://techkeep.qiniudn.com/本科生毕业设计论文样张.doc" target="_blank" rel="external">本科生毕业设计（论文）样张</a><br><a href="http://dsa.dayainfo.com/" target="_blank" rel="external">大雅相似度分析</a></p>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 核心]]></title>
      <url>http://techkeep.cn/2015/05/08/core-java/</url>
      <content type="html"><![CDATA[<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><ul>
<li><p>List</p>
</li>
<li><p>ArrayList</p>
<ul>
<li>LinkList</li>
<li>SkipList</li>
<li>存储方式，如何扩展，分别适用在哪些方面</li>
<li>线程安全<ul>
<li>CopyOnWriteArrayList</li>
<li>Collections.synchronizedList(list)</li>
<li>Vector</li>
<li>有何区别</li>
</ul>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>Map</p>
<ul>
<li>如何存储？如何保证散列均衡，如何扩展</li>
<li>HashMap</li>
<li>LinkedHashMap</li>
<li>TreeMap（红黑树）</li>
<li>ConcurrentHashMap</li>
<li>ConcurrentSkipListMap</li>
</ul>
</li>
<li><p>Set</p>
<ul>
<li>HashSet</li>
<li>LinkedHashSet</li>
<li>TreeSet</li>
<li>ConcurrentSkipListSet</li>
<li>opyOnWriteArraySet</li>
</ul>
</li>
<li><p>Tree</p>
</li>
<li>Queue</li>
<li>LinkedList（双向链表）</li>
<li>ArrayDeque（数组，FIFO）</li>
<li>PriorityQueue（二叉堆实现的优先级队列）</li>
<li><p>线程安全</p>
<ul>
<li>PriorityBlockingQueue（一般用在什么场景）</li>
<li>DelayQueue</li>
<li>ArrayBlockingQueue</li>
</ul>
</li>
<li><p>Stack</p>
</li>
</ul>
<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><ul>
<li>class.getInstance()</li>
<li>getMethod（是否带declare有何区别）</li>
<li>getField</li>
<li>setAcsess</li>
<li>method.invoke()</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[走走停停]]></title>
      <url>http://techkeep.cn/2015/03/20/thinking/</url>
      <content type="html"><![CDATA[<p>已经很久都没有更新过博客了，之前一直想要写一篇长文章，后来就一直拖着。从年前一直拖到了过完了年，然后又拖到了下学期期末，最后过了暑假似乎都没有机会。这次，突然来机会了，因为突然一门课程需要写一份2000+字以上的未来的规划。哈哈，于是就当做博客文章来写吧。</p>
<a id="more"></a>
<h4 id="过去的大一"><a href="#过去的大一" class="headerlink" title="过去的大一"></a>过去的大一</h4><p>很快，真的很快，竟然两年的时间就已经过去了，似乎昨天还是大一的入学。8月的尾巴上面，四个愣头愣脑的家伙跑去无锡参赛，以决赛资格倒数第三名的身份跑过去，自己心里也没底，去之前和老罗差点都吵了起来，但是最后还是抱着没拿到奖就当做是旅游的态度去了。最后结果的国一确实有点意外。总是觉着生活的意外总是很多，但是和某人说的那样，并不是很难。项目中能够说的也多少，参赛的最大的感受就是行业最需要的就是创新，当然我们在做一个东西的时候，我们需要把东西做的就尽可能完美。</p>
<p>9月初急急忙忙从上海回来后，不得不承认的事实就是发现自己已经大三了。老罗早在8月份参加过了一次面试笔试，看着他们找工作，仿佛就看到了一年后的自己。</p>
<p>回望过去的两年确实发生了很多事。两年前，自己觉得自己懂很多。问自己想怎么走，回答先看看吧。觉得自己或许可以科研，至少考个研究生吧，后来发现自己高数却很吃力，英语也很吃力。总是觉得未来要改变世界，最后发现自己都改变不了。以及记不起什么时候突然想着要转专业了。去电气，听说工科的都转去那了？记得那天大早上打电话给老姐，我问她现在头脑清晰吗？最后他说，去一个自己感兴趣的行业，以后自己会有动力的。于是，最后拿着两张都填好的申请表，去了理科楼。</p>
<h4 id="过去的大二"><a href="#过去的大二" class="headerlink" title="过去的大二"></a>过去的大二</h4><p>一个只学过Pascal和Frotran的人去直接学习数据结构是一种怎样的体验？更加关键的是C语言也学的半吊子，于是你发现把时间全部集中在了如何解决C语言的基础问题上，结果可想而知，就感觉数据结构没学过一样体验。模电、数电、数据库、计算机网络、软件工程，当然还要补上C和C++，还有自己看了一些Java，下学期的Web开发倒是见识了一些东西。记得上次在知乎上mu peng说，学习就是一个从模糊逐渐开始清晰的过程，开始胡乱塞给自己一些东西，然后这儿学点，那儿学点，以后自己看到了一些全局的东西，慢慢的整个轮廓就清晰了。Web开发到好像是这样，从自己开始建博客站点，到真正明白了前后端的工作原理后，发现就是这样。实验室氛围让我感觉很好了，所有的小伙伴都为了一件有趣的事情而聚在了一起。生活总是把一些有趣的东西聚合到了一起。</p>
<h4 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h4><p>一直没有任何方向的学习。于是，语言方面，PHP会一点，Java也会一点，Python还能写上几个能跑的算法，C语言遇到指针就有点头疼，C++完全就是在写C的升级版程序，只是用的全是cin和cout，HTML和CSS总是觉得自己写的有点问题，但是不知道问题出在哪里，或许现在前端已经很少有什么纯写HTML和CSS的了，JavaScript好像也会一点，可是一旦高级一点的又不会了。计算机网络感觉都看的很好，数据库SQL语句倒是可以写上那个几句，软件工程感觉没有写过上万行代码和自己设计过什么系统级的东西真真体会不出来。自己鼓捣了很久的Linux，后来发现除了那几个常见的命令，其他的全忘了。</p>
<h4 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h4><p>想了很久，确实需要给自己定一个方向了。以前还觉得要奔着全栈工程师去，现在来看确实太过于遥远了。真的要做好一个方向确实已经很不容易了。对于我而言，全栈只是理想了，能够把一个做到比较好都是需要很多时间的。</p>
<p>开始还在观望要不要考研，别人一问，总是回答，还在考虑吧。现在来看，时间上基本要开始也得开始了。分析来看，自己不想在把时间花在某些政治课程上，同时复习一些高数、英语这些课程的时间需要很多。同时，去纠结的是去读研总得有些自己的想法吧，或者起码找个方向，可是自己确实找不出来。在开发者社区里面也看到了有很多人说，综合来看如果以后目标工作，研究生的三年确实不如工作三年的经验，何况去读研还不能保证自己的选择是对的。而且目前课堂上的东西很多距离实际的工程相差太远，虽然我知道这个不能够比较。记得高考前，突然自己明白了一个道理，学习没有什么尽头的，不是高考结束，也不是大学结束。世界很大，自己要一直学习，才能一点点的了解。突然，感觉放在这里也很合适，不管是本科还是研究生阶段，其实还是自己在不断学习，直接工作或许只是换一种环境学习吧。还有，也有自己的一些观察吧，今年虽然互联网行业巨头BAT的紧缩，有人说是资本寒冬到了，但是确实有点危言耸听。目前来看，互联网行业正处于《浪潮之巅》中所说的一个时代的浪尖。学好技术，坚定的走下去或许是自己的选择。</p>
<p>很想明年能够去更高的地方看看，暑假前，争取去一家大公司实习。</p>
<p>从现在到明年3、4月，继续Java基础的学习，要熟悉Java Web中的SSH三大框架，重点放在服务器端的技术上面，争取能够写出一些小的项目出来。同时还得学好JavaScript这门语言，目前的Web开发来看，JavaScript已经太重要了，基本能够实现从前端到后端的所有模块。算法和数据结构需要自己从头开始了，而且是非常重要的，为了避免之前掉到语言的坑里面，考虑用Python来实现。其余的操作系统、计算机网络这些可能找实习前也需要复习一下，平时的课程也得认真的上。</p>
<p>当然更加关键的肯定是明年的9月份或者更早就得找正式的工作了。能够做好的无非也就前面的提到的那些，语言方面的基础需要多看书，现在的语言应用都是基于框架的，没有牢固的语言基础，框架学着也会有点问题。有时间或许可以试试移动开发，iOS没有Mac不大可能了，Windows Phone的开发受众面实在太窄，也就只有Android了，当然Android市场占有率第一是毋庸置疑的。再有时间也就要毕业了，或许可以研究一下函数式语言，很多人都说可以改变对编程产生巨大影响。同时未来的移动和Web开发的趋势应该是朝着HTML5和JavaScript方向发展了，前端的东西很多，可能一下搞不完了。</p>
<p>当然，计算机肯定不只是Web开发这些，树莓派自己一直没玩过，或许这个可以做出更多有趣的事情来。</p>
<p>未来不远了，或者就在眼前了，多想想自己还需要学习。</p>
<p>写的时候发现已是11月初，记起三年前的这个时候，极其沮丧的回到了学校，带着大包小包，兜兜转转，来到来了长沙。如果说从东北回来，还有人支持我，那么我说我要跑来长沙的想法直接被所有人否决了，没有人支持。但是自己早已经是一个决定了的事谁也改不了的人，于是自己联系，己带着东西就来了。那天是11月4日，这个似乎记得很清楚。埋下头来，只有高考和试题了。三年过后，自己也忘了那种感觉是怎样是怎样，也想象不出来是怎么过来的了。但我一直坚信自己做过的所有决定都是经过深思熟虑，我想一直走下去。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Share]]></title>
      <url>http://techkeep.cn/2014/11/18/python-share/</url>
      <content type="html"><![CDATA[<p>本文主要针对零基础 想学习Python者。本文由网友  @史江歌（<a href="https://github.com/Yixiaohan/codeparkshare" target="_blank" rel="external">原项目 GitHub 地址</a>）根据互联网资料收集整理而成，感谢互联网，感谢各位的分享。</p>
<a id="more"></a>
<h3 id="一、学会使用搜索引擎，尤其是Google。推荐阅读文章："><a href="#一、学会使用搜索引擎，尤其是Google。推荐阅读文章：" class="headerlink" title="一、学会使用搜索引擎，尤其是Google。推荐阅读文章："></a>一、学会使用搜索引擎，尤其是Google。推荐阅读文章：</h3><ul>
<li><a href="http://www.zhihu.com/question/20161362" target="_blank" rel="external">《如何用好Google搜索引擎？》-知乎问答@崔凯</a></li>
<li><a href="http://www.williamlong.info/archives/728.html" target="_blank" rel="external">《十大高明的Google搜索技巧》-雪影蓝风</a></li>
</ul>
<h3 id="二、学会提问-推荐阅读："><a href="#二、学会提问-推荐阅读：" class="headerlink" title="二、学会提问,推荐阅读："></a>二、学会提问,推荐阅读：</h3><ul>
<li><a href="http://wiki.woodpecker.org.cn/moin/AskForHelp" target="_blank" rel="external">《提问的智慧》–by 啄木鸟社区</a></li>
</ul>
<h3 id="三、书籍推荐："><a href="#三、书籍推荐：" class="headerlink" title="三、书籍推荐："></a>三、书籍推荐：</h3><ul>
<li><a href="http://docs.python.org/2/tutorial/index.html" target="_blank" rel="external">Python 官方文档</a>，英语不好的，暂时就先别看了，以后一定肯定要加强英语学习;</li>
<li>对于零基础者，推荐<a href="http://www.greenteapress.com/thinkpython/thinkCSpy.pdf" target="_blank" rel="external">《How to think like a computer scientist》</a>，对应中文版本《Python学习笔记-皮大庆》，非常适合零基础入门；</li>
<li>对于零基础者，推荐<a href="http://book.douban.com/subject/7059900/" target="_blank" rel="external">《Python编程实践》</a>；</li>
<li>对于零基础者，推荐<a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/" target="_blank" rel="external">《简明Python教程》</a>；</li>
<li>对于零基础者，推荐<a href="http://learnpythonthehardway.org/book/" target="_blank" rel="external">《Learn Python The Hard Way》</a>，对应中文版本《笨办法学 Python》；</li>
<li>对于有其他编程语言基础者，推荐<a href="http://book.douban.com/subject/4866934/" target="_blank" rel="external">《Python基础教程》</a>；</li>
<li>更多书籍推荐，知乎问答：<a href="http://www.zhihu.com/question/19593179" target="_blank" rel="external">关于 Python 的经典入门书籍有哪些？</a>；</li>
<li>更多书籍推荐， <a href="http://www.v2ex.com/t/40397" target="_blank" rel="external">V2EX 问答：文科生想学 Python？</a> 以及 <a href="http://www.v2ex.com/go/python" target="_blank" rel="external">V2EX 官方推荐</a>；</li>
</ul>
<h3 id="四、视频推荐："><a href="#四、视频推荐：" class="headerlink" title="四、视频推荐："></a>四、视频推荐：</h3><ul>
<li><a href="http://v.163.com/special/opencourse/bianchengdaolun.html" target="_blank" rel="external">麻省理工公开课《计算机科学及编程导论》</a>，该课程针对零基础者；这门课程适用于那些拥有很少或没有编程经验的学生,它致力于使学生理解计算机在解决问题中的作用,并且帮助学生，不论其专业，使他们对于能够完成有用的小程序的目标充满信心；<!--more-->
</li>
</ul>
<h3 id="五、学习方法"><a href="#五、学习方法" class="headerlink" title="五、学习方法"></a>五、学习方法</h3><ul>
<li><a href="http://www.zhihu.com/question/20039623?nr=1" target="_blank" rel="external">知乎问答：零基础，应当如何开始学习 Python？</a></li>
<li><a href="http://www.zhimaq.com/questions/70/python" target="_blank" rel="external">芝麻问答：如何学习Python？</a></li>
<li><a href="http://www.zhihu.com/question/20702054" target="_blank" rel="external">知乎问答：你是如何自学 Python 的？</a></li>
</ul>
<h3 id="六、Just-Do-It"><a href="#六、Just-Do-It" class="headerlink" title="六、Just Do It"></a>六、Just Do It</h3><p>看了这么多资料了，还没动手敲代码？</p>
<p>好吧，最好一篇文章<a href="http://blog.jobbole.com/26552/" target="_blank" rel="external">《我在学习编程中犯的两个最大错误》</a></p>
<p>Just do it 。动手敲代码吧。</p>
<h3 id="七、Python技术博客、招聘、开源软件、Python中文网站导航"><a href="#七、Python技术博客、招聘、开源软件、Python中文网站导航" class="headerlink" title="七、Python技术博客、招聘、开源软件、Python中文网站导航"></a>七、Python技术博客、招聘、开源软件、Python中文网站导航</h3><p>遇到python问题怎么样解决？<a href="http://blog.csdn.net/xiaowanggedege/article/details/8753013" target="_blank" rel="external">python help dir stackoverflow docs google </a></p>
<p>在线视频教学(英文) <a href="http://www.codecademy.com/zh/tracks/python" target="_blank" rel="external">codecademy</a></p>
<p>英文PythonForBeginner <a href="http://www.pythonforbeginners.com/" target="_blank" rel="external">spythonforbeginners</a></p>
<p>英文<a href="http://programmers.stackexchange.com/questions/12189/how-do-i-learn-python-from-zero-to-web-development" target="_blank" rel="external">How do I learn Python from zero to web development?</a>（各种电子书推荐）</p>
<p>Python应用与实践 <a href="http://www.cnblogs.com/skynet/archive/2013/05/06/3063245.html" target="_blank" rel="external">Python是什么？谁在用它？相关工具？</a>作者：@吴秦</p>
<p><a href="http://blog.csdn.net/JGood/article/category/554799/4" target="_blank" rel="external">Python模块学习</a> 相当于翻译官网文档</p>
<p>针对有其他语言经验的人，英文：<a href="http://learnxinyminutes.com/docs/python/" target="_blank" rel="external">Learn X in Y minutes</a> 中文翻译 <a href="http://youngsterxyf.github.io/2013/06/29/learn-python-in-y-minutes/" target="_blank" rel="external">Y分钟学会Python（译）</a></p>
<p>【强烈推荐】<a href="http://2.myrestful.sinaapp.com/" target="_blank" rel="external">Python小白公益文档</a> 作者：@疯狂制造</p>
<p><a href="http://pycoders-weekly-chinese.readthedocs.org/en/latest/index.html" target="_blank" rel="external">PyCoder’s Weekly 中文翻译</a> 说明：文章质量很高</p>
<p><a href="http://artifex.org/~hblanks/talks/2011/pep20_by_example.html" target="_blank" rel="external">PEP 20 (Python之禅) 的实例</a> 说明：code_stype</p>
<p><a href="http://pycoders-weekly-chinese.readthedocs.org/en/latest/issue5/unipain.html" target="_blank" rel="external">Unicode 之痛</a></p>
<p><a href="https://github.com/wklken/stackoverflow-py-top-qa" target="_blank" rel="external">stackoverflow上Python相关回答整理翻译</a></p>
<p><a href="http://www.crifan.com/files/doc/docbook/python_summary/release/html/python_summary.html" target="_blank" rel="external">Python语言总结-初级中级高级教程</a> 作者：@Crifan Li</p>
<p><a href="http://docs.python-guide.org/en/latest/?utm_campaign=Manong_Weekly_Issue_10&amp;utm_medium=EDM&amp;utm_source=Manong_Weekly" target="_blank" rel="external">Python Guide Python 最佳实践</a> 英文</p>
<h3 id="八、爬虫以及模拟登陆新浪微博"><a href="#八、爬虫以及模拟登陆新浪微博" class="headerlink" title="八、爬虫以及模拟登陆新浪微博"></a>八、爬虫以及模拟登陆新浪微博</h3><p><a href="http://www.zhihu.com/question/20899988" target="_blank" rel="external">知乎：Python 爬虫如何入门学习</a></p>
<p><a href="http://yoyzhou.github.io/blog/2013/03/18/sina-weibo-login-simulator-in-python/" target="_blank" rel="external">Python模拟登录新浪微薄（使用RSA加密方式和Cookies文件）</a></p>
<p><a href="http://uliweb.clkg.org/tutorial/view_chapter/240" target="_blank" rel="external">http://uliweb.clkg.org/tutorial/view_chapter/240</a></p>
<p><a href="http://qinxuye.me/article/a-distributed-weibo-crawler/" target="_blank" rel="external">一个简单的分布式新浪微博爬虫</a></p>
<h3 id="九、工具"><a href="#九、工具" class="headerlink" title="九、工具"></a>九、工具</h3><p>Windows系统下，Python相关包 <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">Windows Binaries for Python Extension Packages</a></p>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Guide for Technical Development by Google]]></title>
      <url>http://techkeep.cn/2014/11/16/guide-for-technical-development/</url>
      <content type="html"><![CDATA[<p>Having a solid foundation in Computer Science is important in being a successful Software Engineer. This guide is a suggested path for University students to develop their technical skills academically and non-academically through self paced hands-on learning. You may use this guide to determine courses to take but please make sure you are taking courses required for your major or faculty in order to graduate. The online resources provided in this guide are not meant to replace courses available at your University. However, they may help supplement your learnings or provide an introduction to the topic.</p>
<p>Using this guide:</p>
<ul>
<li>Please use this guide at your discretion</li>
<li>There may be other things you want to learn or do outside of this guide - go for it!</li>
<li>Checking off all items in this guide does not guarantee a job at Google</li>
<li>This guide will evolve or change - check back for updates<br>Follow our <a href="https://plus.google.com/u/0/+GoogleStudents/posts" target="_blank" rel="external">Google for Students +Page</a> to get additional tips, resources, and other students interested in development.</li>
</ul>
<a id="more"></a>
<h2 id="Recommendations-for-Academic-Learnings"><a href="#Recommendations-for-Academic-Learnings" class="headerlink" title="Recommendations for Academic Learnings"></a>Recommendations for Academic Learnings</h2><ul>
<li><strong>Introduction to CS Course</strong>;Notes: Introduction to Computer Science Course that provides instructions on coding Online Resources: <a href="https://www.google.com/url?q=https%3A%2F%2Fwww.udacity.com%2Fcourse%2Fcs101&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNGdmrWTUY5b_qe3xle9-ddkB1YXqA" target="_blank" rel="external">Udacity - intro to CS course</a>, <a href="https://www.google.com/url?q=https%3A%2F%2Fwww.coursera.org%2Fcourse%2Fcs101&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNE-mScGCD0MJRKuWuFyLJbIr4XdbA" target="_blank" rel="external">Coursera - Computer Science 101</a></li>
<li><strong>Code in at least one object oriented programming language: C++, Java, or Python</strong>;Beginner Online Resources: <a href="https://www.google.com/url?q=https%3A%2F%2Fwww.coursera.org%2Fcourse%2Fprogramming1&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNERrKn8RoMF2C-tzZ_51XpGA2QzUQ" target="_blank" rel="external">Coursera - Learn to Program: The Fundamentals</a>, <a href="http://www.google.com/url?q=http%3A%2F%2Focw.mit.edu%2Fcourses%2Felectrical-engineering-and-computer-science%2F6-092-introduction-to-programming-in-java-january-iap-2010%2Findex.htm&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNHfuFmBicr4_Zh4dtfmk_mYq0BtNQ" target="_blank" rel="external">MIT Intro to Programming in Java</a>, <a href="https://developers.google.com/edu/python/" target="_blank" rel="external">Google’s Python Class</a>, <a href="https://www.coursera.org/course/interactivepython" target="_blank" rel="external">Coursera - Introduction to Python</a>, <a href="http://www.openbookproject.net/thinkcs/python/english2e/" target="_blank" rel="external">Python Open Source E-Book</a> .Intermediate Online Resources: <a href="https://www.google.com/url?q=https%3A%2F%2Fwww.coursera.org%2Fcourse%2Fprogramming1&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNERrKn8RoMF2C-tzZ_51XpGA2QzUQ" target="_blank" rel="external">Udacity’s Design of Computer Programs</a>, <a href="https://www.coursera.org/course/programming2" target="_blank" rel="external">Coursera - Learn to Program: Crafting Quality Code</a>, <a href="https://www.coursera.org/course/proglang" target="_blank" rel="external">Coursera - Programming Languages</a>, <a href="http://cs.brown.edu/courses/cs173/2012/OnLine/" target="_blank" rel="external">Brown University - Introduction to Programming Languages</a></li>
<li><strong>Learn other Programming Languages;</strong>Notes: Add to your repertoire - Java Script, CSS, HTML, Ruby, PHP, C, Perl, Shell. Lisp, Scheme.Online Resources: <a href="http://www.w3schools.com/" target="_blank" rel="external">w3school.com - HTML Tutorial</a>, <a href="http://www.codecademy.com/learn" target="_blank" rel="external">CodeAcademy.com</a></li>
<li><strong>Test Your Code;</strong>Notes: Learn how to catch bugs, create tests, and break your softwareOnline Resources: <a href="https://www.udacity.com/course/cs258" target="_blank" rel="external">Udacity - Software Testing Methods</a>, <a href="https://www.udacity.com/course/cs259" target="_blank" rel="external">Udacity - Software Debugging</a></li>
<li><strong>Develop logical reasoning and knowledge of discrete math;</strong>Online Resources: <a href="http://www.google.com/url?q=http%3A%2F%2Focw.mit.edu%2Fcourses%2Felectrical-engineering-and-computer-science%2F6-042j-mathematics-for-computer-science-fall-2010%2Findex.htm&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNEXtF_m9Lj7XMQZFy8Y92633L2EcQ" target="_blank" rel="external">MIT Mathematics for Computer Science</a>, Coursera - Introduction to Logic, Coursera - Linear and Discrete Optimization, Coursera - Probabilistic Graphical Models, Coursera - Game Theory</li>
<li><strong>Develop strong understanding of Algorithms and Data Structures;</strong>Notes: Learn about fundamental data types (stack, queues, and bags), sorting algorithms (quicksort, mergesort, heapsort), and data structures (binary search trees, red-black trees, hash tables), Big O.Online Resources: <a href="http://www.google.com/url?q=http%3A%2F%2Focw.mit.edu%2Fcourses%2Felectrical-engineering-and-computer-science%2F6-006-introduction-to-algorithms-spring-2008%2Findex.htm&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNEIwTJvLQcPGJL2hPxLibPRvjhbbg" target="_blank" rel="external">MIT Introduction to Algorithms</a>, Coursera Introduction to Algorithms <a href="https://www.coursera.org/course/algs4partI" target="_blank" rel="external">Part 1</a> &amp; <a href="https://www.coursera.org/course/algs4partII" target="_blank" rel="external">Part 2</a>, <a href="http://en.wikipedia.org/wiki/List_of_algorithms" target="_blank" rel="external">List of Algorithms</a>, <a href="http://en.wikipedia.org/wiki/List_of_algorithms" target="_blank" rel="external">List of Data Structures</a>, Book: <a href="http://www.google.com/url?q=http%3A%2F%2Fwww.amazon.com%2FAlgorithm-Design-Manual-Steven-Skiena%2Fdp%2F1849967202%2Fref%3Dsr_1_5%3Fs%3Dbooks%26ie%3DUTF8%26qid%3D1360133842%26sr%3D1-5%26keywords%3Dalgorithms&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNE3JRdn9BbEEQtSBsVhSViU6X1xdQ" target="_blank" rel="external">The Algorithm Design Manual</a></li>
<li><strong>Develop a strong knowledge of operating systems;</strong>Online Resources: <a href="http://www.youtube.com/watch?v=XgQo4JkN4Bw&amp;list=PL3289DD0D0F0CD4A3" target="_blank" rel="external">UC Berkeley Computer Science 162</a></li>
<li><strong>Learn Artificial Intelligence Online Resources;</strong>Stanford University - <a href="http://see.stanford.edu/see/courseinfo.aspx?coll=86cc8662-f6e4-43c3-a1be-b30d1d179743" target="_blank" rel="external">Introduction to Robotics</a>, <a href="http://see.stanford.edu/see/courseinfo.aspx?coll=63480b48-8819-4efd-8412-263f1a472f5a" target="_blank" rel="external">Natural Language Processing</a>, <a href="http://see.stanford.edu/see/courseinfo.aspx?coll=348ca38a-3a6d-4052-937d-cb017338d7b1" target="_blank" rel="external">Machine Learning</a></li>
<li><strong>Learn how to build compilers;</strong>Online Resources: <a href="https://www.coursera.org/course/compilers" target="_blank" rel="external">Coursera - Compilers</a></li>
<li><strong>Learn cryptography;</strong>Online Resources: <a href="https://www.coursera.org/course/crypto" target="_blank" rel="external">Coursera - Cryptography</a>, <a href="https://www.udacity.com/course/cs387" target="_blank" rel="external">Udacity - Applied Cryptography</a></li>
<li><strong>Learn Parallel Programming;</strong>Online Resources: <a href="https://www.coursera.org/course/hetero" target="_blank" rel="external">Coursera - Heterogeneous Parallel Programming</a></li>
</ul>
<h2 id="Recommendations-for-Non-Academic-Learnings"><a href="#Recommendations-for-Non-Academic-Learnings" class="headerlink" title="Recommendations for Non-Academic Learnings"></a>Recommendations for Non-Academic Learnings</h2><ul>
<li><strong>Work on project outside of the classroom;</strong>Notes: Create and maintain a website, build your own server, or build a robot.Online Resources: <a href="http://projects.apache.org/" target="_blank" rel="external">Apache List of Projects</a>, <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013" target="_blank" rel="external">Google Summer of Code</a>, <a href="https://developers.google.com/" target="_blank" rel="external">Google Developer Group</a>.</li>
<li><strong>Work on a small piece of a large system (codebase), read and understand existing code, track down documentation, and debug things;</strong>Notes: Github is a great way to read other people’s code or contribute to a project.Online Resources: <a href="http://github.com/" target="_blank" rel="external">Github</a>, <a href="http://www.fogcreek.com/kiln/" target="_blank" rel="external">Kiln</a></li>
<li><strong>Work on project with other programmers;</strong>Notes: This will help you improve your ability to work well in a team and enable you to learn from others.</li>
<li><strong>Practice your algorithmic knowledge and coding skills;</strong>Notes: Practice your algorithmic knowledge through coding competitions like CodeJam or ACM’s International Collegiate Programming Contest.Online Resources: <a href="http://code.google.com/codejam/" target="_blank" rel="external">CodeJam</a>, <a href="http://icpc.baylor.edu/" target="_blank" rel="external">ACM ICPC</a>.</li>
<li><strong>Become a Teaching Assistant;</strong>Notes: Helping to teach other students will help enhance your knowledge in the subject matter.</li>
<li><strong>Internship experience in software engineering;</strong>Notes: Make sure you apply for internships well in advance of the period internships take place. In the US, internships take place during the summer, May-September, and applications are usually open several months in advance.Online Resources: <a href="http://www.google.com/about/jobs/" target="_blank" rel="external">google.com/jobs</a>.<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2013年电工杯感悟]]></title>
      <url>http://techkeep.cn/2013/12/28/2013%E5%B9%B4%E7%94%B5%E5%B7%A5%E6%9D%AF%E6%84%9F%E6%82%9F/</url>
      <content type="html"><![CDATA[<p>11月11日，晚上看到了这次电工杯的消息，本来不准备去的，因为这段时间貌似事情比较多，各种作业和各种活动，但在数模的集训群里看到说大一的就该这次去见识见识，涨经验，想了想，比较有道理，于是便开始想这次怎么准备。想起CS说他也在准备什么建模，于是回寝室时直接打电话去了。于是，一晚上都在想怎么搞，才能不至于三天随随便便打酱油就过去了，到处找别人的经验和一些感想。当时看完别人的经验后，对这次的比赛还是充满了信心。接着就在群里找队友，最后只找到一个。最终还是把报名表发了过去。</p>
<a id="more"></a>
<p>21日晚上11点，数学中国的那个群里就开始讨论题目了，好像是有人破解了赛题的密码。看了看，好像是真的。原来这次的题目是21日的晚上挂在了百度的网盘上（其实此处已经暗示了这次比赛有多么不正式），而题目word的文档，只是被加密了，于是题目自然而然的就被某些人直接破密了（这些组委会的人也太低估某些人的能力了）。于是群里接着就有人共享了以破解的赛题。我把消息发到集训群里，老师说这不能，不可能泄题的。接着有人直接贴出来淘宝上买题目的链接，再接着又有人在讨论A好像是11年的题目，再接着有人站出来说这题目是糊弄人的。看得眼花缭乱，于是直接睡觉去了。</p>
<p>第二天早上，吃早餐时就碰到了小布  ，说了说晚上关于赛题的事。到了机房，打开赛题的文档，输入早上发布的密码，结果真的是晚上看到的，哭笑不得，瞬间觉得这坑爹的电工杯也太不正式了。<br>接着就是选题，看了看A题的题目描述感觉也不是很难，但好多东西还没学，再一看A的数据，吓了一跳，有40多MB，好像有一千多万个数据。又看看B题，锅炉的优化运行问题，嗯，也不熟悉，但是感觉比较容易入手。于是三个人一致决定烧锅炉。于是三个人一上午都在了解锅炉的知识。而群里又有人在说B题的第一问有现成的文章可以参考，结果去学校的数据库里找了找，还真的有。一直看到1点左右，感觉第一二问已经可以解决了，于是三个人就趁着吃饭的时间，边吃边讨论了一下。“下午和晚上把一二问的模型想出来，并且把这两问的的论文写完”，这是一个非常搞笑的决定，感觉我们还是too young，too simple。</p>
<p>吃完饭，回到机房，真正开始解决问题时才知道是多么艰难，就连公式里的物理量是什么都不知道，就别说什么这个公式，于是到处找资料，看得头晕眼花。最后，照着别的文章上给出的公式，自己算出来的答案发现和一本《锅炉原理》的书上给出的值，相差太远了。而用别人的公式，在加上一点自己的理解后，好像算出的值比较接近。于是三个人都茫然了，到底怎么办呢。于是又去吃晚饭，三个人都没有说什么，决定继续去看文献，看还有什么其他办法没有。接着，第一天就这样过去了，中午的决定成了空谈。</p>
<p>结果晚上还忘记调闹钟了，23日早上还是被队友的电话叫醒的，三下五除二的洗漱完毕，跑到机房，他们也没有什么头绪。然后，我说了说晚上回去后我想的办法：用别人的公式再加上自己的一些理解，虽然有点凑答案的下嫌疑，但至少比没有路走好一点。于是，我开始写论文，另一人开始用matlab解第一二问具体值，还有一人开始找三四问的资料。写文章很是纠结的，格式，排版，内容都要一个个的找别的文献或者论文。憋了一上午，就把一二问的问题分析写完了，主体部分还只写了个标题。下午又继续写，依然是速度很慢。晚上，群里有人说赛题带的那两个附录里的有些物理量可以双击用mathtype打开，试了试，还真的有，好像是每个物理量的表达式，感觉好像是一些提示，呃o_O，瞬间石化了，这，题目解到一半，出来个这种东西。现在换思路已经不大可能了，算了算了，不管了，一条路走到底。第二天结束，论文的第一二问还没写完，在回寝室的路上，我说明天上午一定要把第一二问写完，下午第三问，晚上第四问，然后就得熬夜把文章修改掉。</p>
<p>第三天上午还有英语竞赛，搞完已经快11点了，还没来得及吐槽坑爹的收音机，就吃了中餐（貌似有点早）跑去了机房，要上午完成第一二问已经不可能了，还好小布书第三问有了想法，他已经开始构思第三问了。艰难的把第一二问写完，又开始了第三问，这时明显感觉写得快了，或许是之前找的文献比较多，有些看后有些印象，于是找东西比较快了。晚上12点时，终于是把四问的模型建立求解部分写完了。两个人开始找文章中出现的符号和错误，我开始了最终的排版。一直搞到两点。老师来了，问了问我们写完了吗？我说写完了，快完工了。老师说看看吧，于是老师大致的看了看，马上说你们的摘要套话太多，评委要的是实际解决问题的精华，也就是你的思路，这个要重写，并且说摘要很重要，没写好，就基本不会再继续看下去了。最后，他又说了说排版的问题。</p>
<p>凌晨两点半，一个人睡着了，另一个还在看着文献。于是，我先把排版的问题解决了，接着三个人交流了一下摘要的问题。我把一些优秀论文的摘要看了看，于是又开始重新写摘要。写到四点，老师又来了，又帮我们看了看，修改了几处地方。终于都觉得差不多了。</p>
<p>5点左右，拿着U盘跑三楼去打印，仝老师看到U盘根目录上有一个《精通matlab6.5》的电子书，说了一句：以后有时间看看这，这本书非常好。呃，这算是希望我们把数学建模搞下去的鼓励吗，呵呵。</p>
<p>拿着刚刚打印出来的论文，虽然只有十几页， 想着三天三夜的心血都在这上面， 就明显感觉有一种厚重感。</p>
<p>正如谭老师说的：这三天不能随随便便就搞完了，你得学点东西啊～ 三天的时间，不敢说已经领悟了数模的精神，但感觉真的学到了一些东西。首先是我觉得我们一直在挣扎，但坚持到了最后。这里不得不吐槽一下锅炉了，对于一个学力学的，还是大一的，锅炉这东西真的只听过，看过的不知道高中烧热水的锅炉算不算。谁没事会去研究锅炉呢？于是，有人锅炉烧了22日的一上午，就走了。除了热动的高年级的，基本上没人研究过锅炉，也不会有人无聊到没事找本《锅炉原理》来看，而拿一等奖的人也是这样。煎熬中度过的三天，对于我这种轻度强迫症的人来说，异常纠结，一方面想做好，另一方面，你不得不承认锅炉实在是太难烧了。没有坚持下去，谁也不会知道发生什么。其次是一些感悟，比如有些正式发表的论文不知道是不是正确的，反正很多的人用高老师的那篇《确定最佳过量空气系数的方法》解出的答案是错的，没人说的清是我们错了，还是论文作者错了。还有很神奇的是，我发现有几篇关于锅炉优化运行的论文，目测上去，竟然惊人的相似，有些段落的文字是一模一样的，我真的只能呵呵了。无力吐槽这种作者和发表文章的期刊。还有一些查找资料的方法，论文的写作，word和mathtype的使用等等等。最后，还有锅炉的知识-_-||。最后那天晚上，感觉数模的几个指导老师挺负责的，不仅和我们一起熬夜，改论文，还要帮我们打印好论文，然后早上又要去把论文发出去。赞一个。</p>
<p>然后，打印完把文章交到老师那，打开空间吐槽了一下。如最开始的那段所示。</p>
<p>然后，六点多，回寝室睡觉了，本来还想去上第一节课的，等到睡醒时，发现第二节课都快开始了，还好请假请到了25日的上午。</p>
<p>然后的然后，就没有然后了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 集合系列01之 总体框架]]></title>
      <url>http://techkeep.cn/2012/02/01/Java-%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Java集合是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等。Java集合工具包位置是java.util.*<br>Java集合主要可以划分为4个部分：List列表、Set集合、Map映射、工具类(Iterator迭代器、Enumeration枚举类、Arrays和Collections)。</p>
</blockquote>
<p>Java集合工具包框架如下图。</p>
<p><img src="/media/pic/java/collection/collection01.jpg" alt="img"></p>
<p>说明：看上面的框架图，先抓住它的主干，即Collection和Map。</p>
<ol>
<li><p>Collection是一个接口，是高度抽象出来的集合，它包含了集合的基本操作和属性。</p>
<p>Collection包含了List和Set两大分支。</p>
<p>(01) List是一个有序的队列，每一个元素都有它的索引。第一个元素的索引值是0。List的实现类有LinkedList, ArrayList, Vector, Stack。</p>
<p>(02) Set是一个不允许有重复元素的集合。Set的实现类有HastSet和TreeSet。HashSet依赖于HashMap，它实际上是通过HashMap实现的；TreeSet依赖于TreeMap，它实际上是通过TreeMap实现的。</p>
</li>
<li><p>Map是一个映射接口，即key-value键值对。Map中的每一个元素包含“一个key”和“key对应的value”。</p>
<p>AbstractMap是个抽象类，它实现了Map接口中的大部分API。而HashMap，TreeMap，WeakHashMap都是继承于AbstractMap。<br>Hashtable虽然继承于Dictionary，但它实现了Map接口。</p>
</li>
</ol>
<p>接下来，再看Iterator。它是遍历集合的工具，即我们通常通过Iterator迭代器来遍历集合。我们说Collection依赖于Iterator，是因为Collection的实现类都要实现iterator()函数，返回一个Iterator对象。<br>ListIterator是专门为遍历List而存在的。</p>
<p>再看Enumeration，它是JDK 1.0引入的抽象类。作用和Iterator一样，也是遍历集合；但是Enumeration的功能要比Iterator少。在上面的框图中，Enumeration只能在Hashtable, Vector, Stack中使用。</p>
<p>最后，看Arrays和Collections。它们是操作数组、集合的两个工具类。</p>
<p>有了上面的整体框架之后，我们接下来对每个类分别进行分析。</p>
<h1 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h1><p><a href="/2012/02/01/collection-00-index">00. Java 集合系列目录(Category)</a><br><a href="/2012/02/01/collection-01-summary">01. Java 集合系列01之 总体框架</a><br><a href="/2012/02/02/collection-02-framework">02. Java 集合系列02之 Collection架构</a><br><a href="/2012/02/03/collection-03-arraylist">03. Java 集合系列03之 ArrayList详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/04/collection-04-fail-fast">04. Java 集合系列04之 fail-fast总结(通过ArrayList来说明fail-fast的原理、解决办法)</a><br><a href="/2012/02/05/collection-05-linkedlist">05. Java 集合系列05之 LinkedList详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/06/collection-06-vector">06. Java 集合系列06之 Vector详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/07/collection-07-stack">07. Java 集合系列07之 Stack详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/08/collection-08-List">08. Java 集合系列08之 List总结(LinkedList, ArrayList等使用场景和性能分析)</a><br><a href="/2012/02/09/collection-09-map">09. Java 集合系列09之 Map架构</a><br><a href="/2012/02/10/collection-10-hashmap">10. Java 集合系列10之 HashMap详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/11/collection-11-hashtable">11. Java 集合系列11之 Hashtable详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/12/collection-12-treemap">12. Java 集合系列12之 TreeMap详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/13/collection-13-weakhashmap">13. Java 集合系列13之 WeakHashMap详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/14/collection-14-mapsummary">14. Java 集合系列14之 Map总结(HashMap, Hashtable, TreeMap, WeakHashMap等使用场景)</a><br><a href="/2012/02/15/collection-15-set">15. Java 集合系列15之 Set架构</a><br><a href="/2012/02/16/collection-16-hashset">16. Java 集合系列16之 HashSet详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/17/collection-17-treeset">17. Java 集合系列17之 TreeSet详细介绍(源码解析)和使用示例</a><br><a href="/2012/02/18/collection-18-iterator_enumeration">18. Java 集合系列18之 Iterator和Enumeration比较</a></p>
]]></content>
    </entry>
    
  
  
</search>
